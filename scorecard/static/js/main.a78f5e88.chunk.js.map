{"version":3,"sources":["AgentDropDown.js","MeasurementModal.js","MeasurementList.js","App.js","serviceWorker.js","index.js"],"names":["AgentDropDown","className","onChange","this","props","changed","agents","map","item","value","number","key","name","Component","MeasurementModal","role","id","type","data-dismiss","aria-label","aria-hidden","measurement","MeasurementList","title","items","data-toggle","score","data-target","modalId","onClick","measurementClicked","data-measurement","App","state","selected","measurementModalId","auto","operators","compliance","agentChanged","bind","showMeasurement","getMeasurements","fetch","then","response","json","result","tmpAgents","setState","jquery","on","event","recipient","relatedTarget","data","find","text","e","target","filtered","filter","length","console","log","val","agentNumber","measurements","category","hidden","policyCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a78f5e88.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './AgentDropDown.css';\n\nclass AgentDropDown extends Component{\n    render(){\n        return (\n            <div>\n            <select className=\"form-control\" onChange={this.props.changed}>\n                <option className='dim'>---Select an Agent---</option>\n            {this.props.agents.map(item=> (\n              <option value={item.number} key={item.number}>{item.name}</option>  \n            ))}\n            </select> \n            </div>\n        );\n    };\n\n}\n\nexport default AgentDropDown;","import React, { Component } from 'react'\n\n\nclass MeasurementModal extends Component {\n\n    render(){\n        return (\n            <div className=\"modal\" role=\"dialog\" id={this.props.id}>\n                <div className=\"modal-dialog\">\n                  <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                      <h5 className=\"modal-title\">Measurement</h5>\n                      <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </div>\n                    <div className=\"modal-body\">\n                      <p>{this.props.measurement}</p>\n                    </div>\n                    <div className=\"modal-footer\">\n                      <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                      <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n        );\n    };\n}\nexport default MeasurementModal;","import React, { Component } from 'react';\n\nclass MeasurementList extends Component {\n\n    render(){\n        return (\n            <div>\n                <h3>{this.props.title}</h3>\n                {this.props.items.map(item => (\n                  <button data-toggle=\"modal\" className={ \"measurementButton col-12 ms\"+item.score } \n                      data-target={ \"#\"+this.props.modalId} \n                        onClick={this.props.measurementClicked } \n                        data-measurement={item.title}>{item.title}</button>\n                ))}\n\n            </div>\n\n        );\n    }\n}\nexport default MeasurementList","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport AgentDropDown from './AgentDropDown';\nimport MeasurementModal from './MeasurementModal';\nimport jquery from 'jquery';\nimport MeasurementList from './MeasurementList';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      agents : [],\n      selected : null,\n      measurementModalId : \"modalId\",\n      measurement:\"\",\n      auto : [],\n      operators: [],\n      compliance: []\n    }\n\n    this.agentChanged = this.agentChanged.bind(this);\n    this.showMeasurement = this.showMeasurement.bind(this);\n    this.getMeasurements = this.getMeasurements.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('./agents.json')\n    .then(response => response.json())\n    .then(result => {\n      const tmpAgents = result.map(item => {\n          return item;\n      });\n\n      this.setState({\n        agents : tmpAgents\n      });\n      \n    })\n\n    // bind to the modal....\n    const id = \"#\"+ this.state.measurementModalId;\n    \n    jquery(id).on('show.bs.modal', function (event) {\n      var button = jquery(event.relatedTarget) // Button that triggered the modal\n      var recipient = button.data('measurement') // Extract info from data-* attributes\n      \n      // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\n      // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\n      var modal = jquery(this);\n      modal.find('.modal-title').text(recipient);\n      //modal.find('.modal-body input').val(recipient);\n    })\n  }\n\n  agentChanged(e){\n    this.setState({\n      selected : null, auto:[], compliance:[], operators: []\n    });\n    \n    if( e.target.value != null && e.target.value !== \"\" ){\n      const filtered = this.state.agents.filter(item => {\n        return item.number === e.target.value;\n      });\n\n      if( filtered.length > 0 ){\n        this.setState({ selected : filtered[0] })\n        this.getMeasurements(filtered[0].number)\n      }  \n    }\n    console.log(e.target.value);\n  }\n\n  showMeasurement(e){\n    const target = jquery(e.target);\n    var val = target.data('measurement');\n    this.setState({\n      measurement : val\n    });\n  }\n  getMeasurements(agentNumber){\n    const file = \"./\"+agentNumber+\".json\";\n\n    fetch(file)\n    .then(response => response.json())\n    .then(result => {\n      const measurements = result.map(item => {\n          return item;\n      });\n      this.setState({\n        auto: measurements.filter(item => {\n          return item.category === \"Auto\"\n        }),\n        operators: measurements.filter(item => {\n          return item.category === \"Operators\"\n        }),\n        compliance: measurements.filter(item => {\n          return item.category === \"Compliance\"\n        })\n      });\n      \n    })\n  }\n\n  render(){\n    return (\n      <main>\n        <div className=\"container pt-1\">\n          <div>\n              <div className=\"jumbotron row\">\n                <h1>New Business Agent Scorecard</h1>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-5 col-12\">\n                  <AgentDropDown agents={this.state.agents} changed={this.agentChanged} />\n                </div>\n              </div>\n              <div className=\"row\">&nbsp;</div>\n              <div className=\"row pt3\" hidden={this.state.selected == null}>\n                <div className=\"col-sm-4 col-6 scoreBox\">\n                  { this.state.selected != null && <div className=\"card\">\n                    <div className=\"card-body\">\n                      <h1 className=\"card-title\">{this.state.selected.policyCount}</h1>\n                      <p className=\"card-text\">\n                        This is the total number of polices written for the month.\n                      </p>\n                    </div>\n                  </div> }\n                </div>\n                <div className=\"col-sm-4 col-6 scoreBox\">\n                  { this.state.selected != null && \n                  <div className=\"card\">\n                    <div className=\"card-body\">\n                      <h1 className=\"card-title\">{this.state.selected.score}</h1>\n                      <p className=\"card-text\">\n                        This is your overall score based on the months new business.\n                      </p>\n                    </div>\n                  </div>\n                }\n                </div>\n                <div className=\"col-sm-1\"></div>\n              </div>\n              <div className=\"row\">&nbsp;</div>\n              {/* Need a few columns */}\n              <div className=\"row\" hidden={this.state.selected === null}>\n                <div className=\"col-sm-4 col-12 measurements\">\n                  <MeasurementList \n                    items={this.state.auto} \n                    title=\"Auto\" \n                    measurementClicked={this.showMeasurement} \n                    modalId={this.state.measurementModalId} />                  \n                </div>\n                <div className=\"col-sm-4 col-12 measurements\">\n                  <MeasurementList \n                    items={this.state.operators} \n                    title=\"Operators\" \n                    measurementClicked={this.showMeasurement} \n                    modalId={this.state.measurementModalId} />\n                </div>\n                <div className=\"col-sm-4 col-12 measurements\">\n                <MeasurementList \n                    items={this.state.operators} \n                    title=\"Compliance\" \n                    measurementClicked={this.showMeasurement} \n                    modalId={this.state.measurementModalId} />\n                </div>\n        \n                <MeasurementModal id={this.state.measurementModalId} measurement={this.state.measurement} />\n              </div>\n              \n            </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want sysmyour app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}